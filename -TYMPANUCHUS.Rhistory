sapply(y$point_state, function(z) {
if(is.na(z)) {
"blue"
} else if(z == 1) {
"green"
} else if(z == 2) {
"orange"
} else if(z == 3) {
"pink"
} else if(z == 4){
"red"
} else if(z == 5){
"blue"
} else if(z == 6){
"brown"
}})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(x)
)
m <- leaflet(options = leafletOptions(zoomControl = TRUE,
minZoom = 1, maxZoom = 22,
dragging = TRUE)) %>%
addTiles() %>% # Default base mape
addProviderTiles("Esri.WorldImagery") %>%  # ortho image
addProviderTiles(providers$Stamen.TonerLines) %>% # state lines and roads.
#addProviderTiles(providers$Stamen.TonerLabels) %>% # add location and road labels
addScaleBar() %>%
addAwesomeMarkers(lng=x$x,
lat=x$y,
icon=icons,
popup = x$date) %>%
addPolylines(lng =x$x,
lat = x$y,
weight=3, color="red")
return(m)
}
amwo_hmm %>%
filter(ID == "FL-2022-08-2022") %>%
#View()
leaflet.male(.)
?fit_ssm
library(tidyverse)
library(lubridate)
library(move)
library(momentuHMM)
library(leaflet)
library(RColorBrewer)
library(sf)
library(furrr)
library(here)
library(crawl)
login <- movebankLogin(username = "LA_Berigan", password="33szcNUtv4iyPGU")
amwo_2018 <- getMovebankData(study = "American Woodcock Migration Ecology in Eastern North America", login = login, timestamp_start = "20180105000000000", timestamp_end = "20180630000000000", removeDuplicatedTimestamps=TRUE) %>% as.data.frame()
amwo_2019 <- getMovebankData(study = "American Woodcock Migration Ecology in Eastern North America", login = login, timestamp_start = "20190105000000000", timestamp_end = "20190630000000000", removeDuplicatedTimestamps=TRUE) %>% as.data.frame()
amwo_2020 <- getMovebankData(study = "American Woodcock Migration Ecology in Eastern North America", login = login, timestamp_start = "20200105000000000", timestamp_end = "20200630000000000", removeDuplicatedTimestamps=TRUE) %>% as.data.frame()
amwo_2021 <- getMovebankData(study = "American Woodcock Migration Ecology in Eastern North America", login = login, timestamp_start = "20210105000000000", timestamp_end = "20210630000000000", removeDuplicatedTimestamps=TRUE) %>% as.data.frame()
amwo_2022 <- getMovebankData(study = "American Woodcock Migration Ecology in Eastern North America", login = login, timestamp_start = "20220105000000000", timestamp_end = "20220630000000000", removeDuplicatedTimestamps=TRUE) %>% as.data.frame()
amwo_spring <- as.data.frame(rbind(amwo_2018, amwo_2019, amwo_2020, amwo_2021, amwo_2022))
amwo_spring <- amwo_spring %>%
transmute(ID = local_identifier,
#time = as.POSIXct(round(force_tzs(timestamp, tzone = "GMT", tzone_out = "EST"), "hour")), #time rounded in EST
time = timestamp,
lon = location_long,
lat = location_lat,
tagtype = comments,
sex = sex,
age = taxon_detail,
altitude = height_above_msl)
amwo_spring <- amwo_spring %>%
mutate(t = strftime(time, format="%H:%M"),
date = strftime(time, format="%Y-%m-%d")) #%>%
#distinct(date, ID, .keep_all = TRUE) # remove multiple locations on same day, mainly retaining only 1 of 3 locations 1st day after marking
amwo_spring <- amwo_spring %>%
mutate(age = recode_factor(age,
"Second Year" = "juv",
"Hatch Year" = "juv",
"After Hatch Year" = "ad",
"After Second Year" = "ad",
"Third Year" = "ad",
"After Third Year" = "ad"))
amwo_spring <- amwo_spring %>%
separate(tagtype, c("tagtype", "second", "schedule"), sep = " ") %>%
dplyr::select(-second) %>%
mutate(ID2 = ID) %>%
separate(ID2, c("m.state", "m.year", "third"), sep = "-") %>%
dplyr::select(-third)
amwo_spring_males <- amwo_spring %>%
filter(sex == "m")
amwo_spring_males <- amwo_spring_males %>%
mutate(year = strftime(time, format="%Y")) %>%
mutate(animal_name = ID,
ID = paste(ID, year, sep="-"))
amwo_spring_males <- amwo_spring_males %>%
mutate(julian_day = yday(ymd(date)))
individuals_removed_for_too_few_locations <- amwo_spring_males %>%
distinct(ID, date,.keep_all = TRUE) %>%
group_by(ID) %>%
tally() %>%
filter(n < 3) %>%
pull(ID)
birds_to_keep <- amwo_spring_males %>%
distinct(ID, date,.keep_all = TRUE) %>%
group_by(ID) %>%
tally() %>%
filter(n > 2) %>%
pull(ID)
amwo_spring_males <- amwo_spring_males %>%
filter(ID %in% birds_to_keep)
# Comment this out if running repeatedly; otherwise it will just slow down the code
# googledrive::as_id("https://drive.google.com/file/d/19JA5OztH3hS4MPfVnH5zswDxSSLcWxL3/view?usp=sharing") %>%
#         googledrive::drive_download(path = here("capture_sheet.xlsx"), overwrite = TRUE)
capture_dates <- readxl::read_excel(here("capture_sheet.xlsx"), col_types = c("text", "text", "date", "numeric", "numeric", "numeric", "numeric", "text", "text", "text", "text", "text", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "text", "text", "text", "text", "text", "text")) %>%
mutate(`Argos_ID` = as.character(`Argos_ID`)) %>%
transmute(animal_name = `Movebank_ID`,
capture_date = Date)
individuals_tagged_too_late <- amwo_spring_males %>%
left_join(capture_dates) %>%
filter((year == year(capture_date) & mdy(paste0("2/15/", year)) < capture_date)) %>% #remove locations when the bird was caught after Feb 15 in the year of concern
dplyr::select(ID, animal_name, year) %>%
distinct()
individuals_died_too_early <- amwo_spring_males %>%
group_by(ID) %>%
summarise(max_time = max(time)) %>%
mutate(max_date = mdy(paste0(month(max_time), "/", day(max_time), "/2020"))) %>%
filter(max_date < mdy("5/15/2020")) %>%
pull(ID)
# plan(multisession)
#
# amwo_spring_males$mean_dist_7 <- amwo_spring_males %>%
#   dplyr::transmute(ID_iter = ID, x_iter = lon, y_iter = lat) %>%
#   future_pmap(function(ID_iter, x_iter, y_iter){
#
#     iter_sf <- data.frame(x = x_iter, y = y_iter) %>%
#       st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
#
#     other_locs <- amwo_spring_males %>%
#       st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = FALSE) %>%
#       filter(ID == ID_iter)
#
#     st_distance(x = iter_sf, y = other_locs) %>%
#       as.numeric() %>%
#       sort() %>%
#       .[2:8] %>%
#       mean(na.rm = TRUE) %>%
#       return()
#   }) %>%
#   unlist()
#
# plan(sequential)
library(aniMotum)
View(amwo_spring_males)
amwo_spring_males %>%
format_data(id = "ID",
coord = c("lon", "lat"))# %>%
t <- amwo_spring_males %>%
format_data(id = "ID",
coord = c("lon", "lat"))# %>%
View(t)
t <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat"))# %>%
t <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat")) %>%
fit_ssm(model = "rw",
time.step = 24,
spdf = FALSE)
warnings()
grab(t)
q <- grab(t)
View(q)
q <- grab(t, "fitted")
q <- grab(t, "predicted") #
unnested_birds <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat")) %>%
fit_ssm(model = "rw",
time.step = 24,
spdf = FALSE) %>%
grab(t, "predicted")
unnested_birds <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat")) %>%
fit_ssm(model = "rw",
time.step = 24,
spdf = FALSE) %>%
grab(what = "predicted")
View(unnested_birds)
?rename
View(amwo_spring_males)
unnested_birds <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat")) %>%
fit_ssm(model = "rw",
time.step = 24,
spdf = FALSE) %>%
grab(what = "predicted") %>%
dplyr::rename(ID = id, time = date) %>%
dplyr::select(amwo_spring_males, ID, date, year, animal_name)
vignette("Overview")
unnested_birds <- amwo_spring_males %>%
format_data(id = "ID",
date = "time",
coord = c("lon", "lat")) %>%
fit_ssm(model = "rw",
time.step = 24,
spdf = FALSE) %>%
grab(what = "predicted") %>%
dplyr::rename(ID = id, time = date) %>%
left_join(y = dplyr::select(amwo_spring_males, ID, date, year, animal_name))
amwo_hmm <- amwo_spring_males %>%
rename(x = lon, y = lat)
#remove duplicates by date to deal with predicted locations on the same day as the observed location
amwo_hmm <- amwo_hmm %>%
##mutate(date = strftime(time, format="%Y-%m-%d")) %>%
##distinct(date, ID, .keep_all = TRUE) %>%
mutate(julian_day = yday(ymd(date)),
##
locType = "p") #Redo the julian day calculation
amwo_hmm$lat_diff <- map(1:nrow(amwo_hmm),  function(i){
if(i == 1){return(NA)} else{#for the first row, return 1
if(amwo_hmm[i,"ID"] != amwo_hmm[i-1,"ID"]){ #is this the first point for this ID? Return NA
return(NA)
} else{
return(amwo_hmm[i,"y"] - amwo_hmm[i-1,"y"])
}
}
}) %>% unlist()
?detach
detach(aniMotum)
##
detach("aniMotum")
detach("package:aniMotum", unload = TRUE)
amwo_hmm$lat_diff <- map(1:nrow(amwo_hmm),  function(i){
if(i == 1){return(NA)} else{#for the first row, return 1
if(amwo_hmm[i,"ID"] != amwo_hmm[i-1,"ID"]){ #is this the first point for this ID? Return NA
return(NA)
} else{
return(amwo_hmm[i,"y"] - amwo_hmm[i-1,"y"])
}
}
}) %>% unlist()
amwo_hmm <- amwo_hmm %>%
mutate(lat_diff_abs = abs(lat_diff)) %>%
dplyr::select(ID, animal_name, year, locType, x, y, time, date, julian_day) %>%
as.data.frame()
plan(multisession)
amwo_hmm$mean_dist_7 <- amwo_hmm %>%
dplyr::select(ID, x, y) %>%
future_pmap(function(ID_iter, x_iter, y_iter){
iter_sf <- data.frame(x = x_iter, y = y_iter) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
other_locs <- amwo_hmm %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE) %>%
filter(ID == ID_iter)
st_distance(x = iter_sf, y = other_locs) %>%
as.numeric() %>%
sort() %>%
.[2:8] %>%
mean(na.rm = TRUE) %>%
return()
}) %>%
unlist()
plan(sequential)
View(amwo_hmm)
amwo_hmm <- amwo_hmm %>%
mutate(log_mean_dist_7 = log(mean_dist_7 + 0.1)) %>% #Adding a small # to deal with 0 distances
prepData(type = "LL") %>% #, covNames = c("julian_day", "log_mean_dist_7")
mutate(step = round(step, digits = 2))
summer_transient_movement <- amwo_hmm %>%
filter(ID == "VA-2020-52-2020" & julian_day > 160)
#mutate(id_time = paste(ID, as.character(time))) %>%
#filter(id_time == "VA-2020-52-2020 2020-06-19 01:59:28" | id_time == "VA-2020-52-2020 2020-06-28 19:01:20") %>%
#mutate(id_time = NULL)
amwo_hmm <- amwo_hmm %>%
filter(!(ID == "VA-2020-52-2020" & julian_day > 160))
# mutate(id_time = paste(ID, as.character(time))) %>%
# filter(id_time != "VA-2020-52-2020 2020-06-19 01:59:28") %>%
# filter(id_time != "VA-2020-52-2020 2020-06-28 19:01:20") %>%
# mutate(id_time = NULL)
amwo_hmm$min.step <- ifelse(amwo_hmm$step > 30.2, 1, 0)
individuals_removed_for_no_migratory_steps <- unique(amwo_hmm$ID [amwo_hmm$min.step == 1])
amwo_hmm <- amwo_hmm[(amwo_hmm$ID %in% amwo_hmm$ID [amwo_hmm$min.step == 1]) , ]
amwo_hmm$min.step <- NULL
## rank observations (requires correct sorting), ifelse to covert first observations to state 1 and all others NA
knownStates <- amwo_hmm %>%
group_by(ID) %>%
mutate(ranks = row_number()) %>%
mutate(known = ifelse(ranks == "1", 1, NA)) %>%
pull(known)
stateNames <- c("pre","migration", "stopover","post")
dist <- list(step="gamma", angle="wrpcauchy", y = "norm", julian_day = "norm", log_mean_dist_7 = "norm") #, lat_diff_abs = "gamma" , pts_10mi_log = "norm"
fixPar <- list(beta=matrix(c(NA, -100, -100, # pre-migration to transitions, can't go pre- to post
-100, NA, NA,  #once entered migration can't go back to pre
-100, NA, NA, #Once entered stopover, can only go back to migration or advance to post-migration
-100, -100, -100), nrow = 1, byrow = TRUE)) #once entered post-migration, can't leave
Par0_m1 <- list(step=c(0.485, 211.927, 0.485, 0.485, #mean in km
0.7327, 289.599, 0.7327, 0.7327, # SD in km
0.026, 0.036, 0.026, 0.026), #zeromass ie how many zeroes expected in the distribution
angle=c(0, 0, 0, 0, #mean
0.5, 0.5, 0.5, 0.5), #concentration
y = c(34.32931, 36.79636, 36.79636,  41.58981,
2.398324, 4.035114, 4.035114, 4.433215),
julian_day = c(39.19987, 79.72239, 79.72239, 136.54740, #mean
18.71277, 20.65775, 20.65775, 22.94372),
log_mean_dist_7 = c(log(100), log(5000), log(100), log(100), #mean
log(50), log(20), log(20), log(50))) #sd
# lat_diff_abs = c(0.01, 1, 0.01,
#                  0.01, 1, 0.01,
#                  0.026, 0.036, 0.026))
fit_and_predict <- function(.x){
set.seed(8)
m1 <- fitHMM(data=.x, nbStates=4, dist=dist, Par0 = Par0_m1,
estAngleMean = list(angle=TRUE),
fixPar=fixPar,
#knownStates = knownStates,
#formula = ~julian_day + log_mean_dist_7, #state 2 to 3. page 47 of vignette shows how to create the beta matrix
stateNames = stateNames)
.x$step_state <- viterbi(m1)
#step state shows the bird's behavior between points, point state shows the birds behavior at points
.x$point_state <- map(1:nrow(.x),  function(i){
if(i == 1){return(1)} else{ #for the first row, return 1
if(.x[i,"ID"] != .x[i-1,"ID"]){ #is this the first point for this ID? Return the starting state
return(1)
} else{
if(.x[i,"step_state"] == .x[i-1,"step_state"]){ #is the current step state the same as the last step state? Return the current step state
return(.x[i,"step_state"])
} else{
if(.x[i,"step_state"] == 2 & .x[i-1,"step_state"] == 1){ #is the current step state mig and the previous step pre-mig? Return pre-mig
return(1)
} else {
if(.x[i,"step_state"] == 2 & .x[i-1,"step_state"] == 3){#is the current step state mig and the previous step stopover? Return stopover
return(3)
} else{ #in all other circumstances, return the current step state
return(.x[i,"step_state"])
}
}
}
}
}
}) %>% unlist()
return(list(model = m1, results = .x))
}
results_initial <- fit_and_predict(amwo_hmm) #results_initial includes both the created model and the df with predicted states
results_initial$model #probabilities of transition
amwo_hmm <- map(unique(amwo_hmm$ID), function(ind){
first_loc <- amwo_hmm %>%
filter(ID == ind) %>%
head(n = 1) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
amwo_ind <- amwo_hmm %>%
filter(ID == ind) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE) %>%
mutate(condition_distance_km_pre = as.numeric(st_distance(geometry, first_loc))/1000) %>%
st_drop_geometry() %>%
mutate(within_dist_pre = condition_distance_km_pre < 16.1) #10
amwo_ind <- amwo_ind %>%
mutate(row_num = 1:nrow(amwo_ind))
highest_premig_row <- amwo_ind %>%
filter(within_dist_pre == 1) %>%
pull(row_num) %>%
max()
if(highest_premig_row < -1000){
cat(crayon::magenta("no points within 16.1 kilometers of the centroid"))
}
amwo_ind <- amwo_ind %>%
mutate(point_state = if_else(row_num <= highest_premig_row, 1 , point_state)) %>% #point_state_premig_corrected
mutate(condition_distance_km_pre = NULL,
within_dist_pre = NULL,
row_num = NULL)
}) %>%
exec("bind_rows", .)
amwo_hmm <- results_initial$results
results_initial$model #probabilities of transition
amwo_hmm <- map(unique(amwo_hmm$ID), function(ind){
first_loc <- amwo_hmm %>%
filter(ID == ind) %>%
head(n = 1) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
amwo_ind <- amwo_hmm %>%
filter(ID == ind) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE) %>%
mutate(condition_distance_km_pre = as.numeric(st_distance(geometry, first_loc))/1000) %>%
st_drop_geometry() %>%
mutate(within_dist_pre = condition_distance_km_pre < 16.1) #10
amwo_ind <- amwo_ind %>%
mutate(row_num = 1:nrow(amwo_ind))
highest_premig_row <- amwo_ind %>%
filter(within_dist_pre == 1) %>%
pull(row_num) %>%
max()
if(highest_premig_row < -1000){
cat(crayon::magenta("no points within 16.1 kilometers of the centroid"))
}
amwo_ind <- amwo_ind %>%
mutate(point_state = if_else(row_num <= highest_premig_row, 1 , point_state)) %>% #point_state_premig_corrected
mutate(condition_distance_km_pre = NULL,
within_dist_pre = NULL,
row_num = NULL)
}) %>%
exec("bind_rows", .)
amwo_hmm <- map(unique(amwo_hmm$ID), function(ind){
last_loc <- amwo_hmm %>%
filter(ID == ind) %>%
tail(n = 1) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
amwo_ind <- amwo_hmm %>%
filter(ID == ind) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE) %>%
mutate(condition_distance_km_post = as.numeric(st_distance(geometry, last_loc))/1000) %>%
st_drop_geometry() %>%
mutate(within_dist_post = condition_distance_km_post < 8) #16.1
amwo_ind <- amwo_ind %>%
mutate(row_num = 1:nrow(amwo_ind))
lowest_postmig_row <- amwo_ind %>%
filter(within_dist_post == 1) %>%
pull(row_num) %>%
min()
if(lowest_postmig_row< -1000){
cat(crayon::magenta("no points within 8 kilometers of the last point"))
}
if(last_loc$point_state == 4){
amwo_ind <- amwo_ind %>%
mutate(point_state = if_else(row_num >= lowest_postmig_row, 4, point_state)) %>%
mutate(within_dist_post = NULL,
condition_distance_km_post = NULL,
row_num = NULL)
} else {
amwo_ind <- amwo_ind %>%
mutate(within_dist_post = NULL,
condition_distance_km_post = NULL,
row_num = NULL)
}
return(amwo_ind)
}) %>%
exec("bind_rows", .)
summer_transient_movement %>%
mutate(step_state = c(rep(4,19), NA), point_state = 4) ->
summer_transient_movement
amwo_hmm <- amwo_hmm %>%
filter(ID != "RI-2019-21-2020",
ID != "RI-2019-28-2020",
ID != "RI-2019-29-2020",
ID != "VA-2018-03-2018")
#ID != "RI-2019-18-2020")
amwo_hmm <- amwo_hmm %>%
mutate(unk_init_flag = if_else(ID %in% individuals_tagged_too_late$ID, TRUE, FALSE)) %>%
mutate(unk_term_flag = if_else(ID %in% individuals_died_too_early, TRUE, FALSE))
#Save amwo_hmm to a file that can be reviewed via the Shiny app
saveRDS(amwo_hmm, file = here("classifier_spring", "spring_male_3_state_model.rds"))
library(shiny); runApp('classifier_spring/visualization/spring_male_3_state_app.R')
##
detach("package:aniMotum", unload = TRUE)
amwo_hmm <- unnested_birds %>%
rename(x = lon, y = lat)
View(unnested_birds)
amwo_hmm <- unnested_birds %>%
mutate(x = lon, y = lat)
## amwo_hmm <- unnested_birds %>%
##   rename(x = mu.x, y = mu.y) %>%
##   ungroup()
#remove duplicates by date to deal with predicted locations on the same day as the observed location
amwo_hmm <- amwo_hmm %>%
##mutate(date = strftime(time, format="%Y-%m-%d")) %>%
##distinct(date, ID, .keep_all = TRUE) %>%
mutate(julian_day = yday(ymd(date)),
##
locType = "p") #Redo the julian day calculation
amwo_hmm$lat_diff <- map(1:nrow(amwo_hmm),  function(i){
if(i == 1){return(NA)} else{#for the first row, return 1
if(amwo_hmm[i,"ID"] != amwo_hmm[i-1,"ID"]){ #is this the first point for this ID? Return NA
return(NA)
} else{
return(amwo_hmm[i,"y"] - amwo_hmm[i-1,"y"])
}
}
}) %>% unlist()
amwo_hmm <- amwo_hmm %>%
mutate(lat_diff_abs = abs(lat_diff)) %>%
dplyr::select(ID, animal_name, year, locType, x, y, time, date, julian_day) %>%
as.data.frame()
plan(multisession)
amwo_hmm$mean_dist_7 <- amwo_hmm %>%
dplyr::select(ID, x, y) %>%
future_pmap(function(ID_iter, x_iter, y_iter){
iter_sf <- data.frame(x = x_iter, y = y_iter) %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE)
other_locs <- amwo_hmm %>%
st_as_sf(coords = c("x", "y"), crs = 4326, remove = FALSE) %>%
filter(ID == ID_iter)
st_distance(x = iter_sf, y = other_locs) %>%
as.numeric() %>%
sort() %>%
.[2:8] %>%
mean(na.rm = TRUE) %>%
return()
}) %>%
unlist()
plan(sequential)
amwo_hmm <- amwo_hmm %>%
mutate(log_mean_dist_7 = log(mean_dist_7 + 0.1)) %>% #Adding a small # to deal with 0 distances
prepData(type = "LL") %>% #, covNames = c("julian_day", "log_mean_dist_7")
mutate(step = round(step, digits = 2))
